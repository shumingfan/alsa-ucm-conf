# Use case Configuration for sof-soundwire card

#
# Arguments:
#   ForAmps - regex filter for var:SpeakerAmps
#   Amp - amplifier number (1,2 etc.)
#   Sel - channel selection (0,0=L,L 0,1=L,R 1,0=R,L 1,1=R,R)
#
DefineMacro.rt712spk.If.0 {
	Condition {
		#Type RegexMatch
		#Regex "${var:__ForAmps}"
		#String "${var:SpeakerAmps}"
		
		Type ControlExists
		Control "name='rt712-${var:__Amp} OT23 L Switch'"
	}
	True {
		EnableSequence [
			cset "name='rt712-${var:__Amp} Posture Number Select' ${var:__Sel}"
		]
		If.lrswitch {
			Condition {
				Type ControlExists
				Control "name='rt712-${var:__Amp} OT23 L Switch'"
			}
			True {
				EnableSequence [
					cset "name='rt712-${var:__Amp} OT23 L Switch' 1"
					cset "name='rt712-${var:__Amp} OT23 R Switch' 1"
				]
				DisableSequence [
					cset "name='rt712-${var:__Amp} OT23 L Switch' 0"
					cset "name='rt712-${var:__Amp} OT23 R Switch' 0"
				]
			}
			False {
				EnableSequence [
					cset "name='rt712-${var:__Amp} FU06 Switch' 1"
				]
				DisableSequence [
					cset "name='rt712-${var:__Amp} FU06 Switch' 0"
				]
			}
		}
	}
	False {
		EnableSequence [
			cset "name='rt712 Posture Number Select' 0,1"
		]
		If.lrswitch {
			Condition {
				Type ControlExists
				Control "name='rt712 OT23 L Switch'"
			}
			True {
				EnableSequence [
					cset "name='rt712 OT23 L Switch' 1"
					cset "name='rt712 OT23 R Switch' 1"
				]
				DisableSequence [
					cset "name='rt712 OT23 L Switch' 0"
					cset "name='rt712 OT23 R Switch' 0"
				]
			}
			False {
				EnableSequence [
					cset "name='rt712 FU06 Switch' 1"
				]
				DisableSequence [
					cset "name='rt712 FU06 Switch' 0"
				]
			}
		}
	}
}

If.codecspk {
	Condition {
		Type RegexMatch
		Regex "(rt712(-sdca)?)"
		String "${var:MultiSpeakerShadow}"
	}
	True {
		SectionDevice."Speaker" {
			Comment "Speaker"
				
			Macro.num1.rt712spk { ForAmps "1" Amp 1 Sel "0,1" }
			Macro.num2.rt712spk { ForAmps "2" Amp 1 Sel "0,0" }
			Macro.num3.rt712spk { ForAmps "2" Amp 2 Sel "1,1" }

			EnableSequence [
				cset "name='Speaker Switch' on"
			]

			DisableSequence [
				cset "name='Speaker Switch' off"
			]

			Value {
				PlaybackPriority 100
				PlaybackPCM "hw:${CardId},2"
			}
		}
	}
}

If.codecmic {
	Condition {
		Type RegexMatch
		Regex "(rt712(-sdca)?)"
		String "${var:MultiMicShadow}"
	}
	True {
		SectionDevice."Mic" {
			Comment	"SoundWire microphones"

			EnableSequence [
				cset "name='rt712 FU1E Capture Switch' 1"
			]

			DisableSequence [
				cset "name='rt712 FU1E Capture Switch' 0"
			]

			Value {
				CapturePriority 100
				CapturePCM "hw:${CardId},4"
				CaptureSwitch "rt712 FU1E Capture Switch"
				CaptureVolume "rt712 FU1E Capture Volume"
				CaptureMixerElem "rt712 FU1E"
			}
		}
	}
}

SectionDevice."Headphones" {
	Comment	"Headphones"

	EnableSequence [
		cset "name='Headphone Switch' on"
	]

	DisableSequence [
		cset "name='Headphone Switch' off"
	]

	Value {
		PlaybackPriority 200
		PlaybackPCM "hw:${CardId}"
		JackControl "Headphone Jack"
	}
}

SectionDevice."Headset" {
	Comment "Headset Microphone"

	EnableSequence [
		cset "name='rt712 FU0F Capture Switch' on"
	]

	DisableSequence [
		cset "name='rt712 FU0F Capture Switch' off"
	]

	Value {
		CapturePriority 300
		CapturePCM "hw:${CardId},1"
		JackControl "Headset Mic Jack"
		CaptureSwitch "rt712 FU0F Capture Switch"
		CaptureVolume "rt712 FU0F Capture Volume"
		CaptureMixerElem "rt712 FU0F"
	}
}

